version: '3.8'

services:
  # Python Flask API Service
  python-service:
    build:
      context: ./python-service
      dockerfile: Dockerfile
    container_name: python-api
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - MONGO_URI=mongodb://mongo:27017/microservices
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FLASK_ENV=development
    volumes:
      - ./python-service:/app
    depends_on:
      - mongo
      - redis
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node.js Express API Service
  node-service:
    build:
      context: ./node-service
      dockerfile: Dockerfile
    container_name: node-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - MONGO_URI=mongodb://mongo:27017/microservices
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NODE_ENV=development
      - PYTHON_SERVICE_URL=http://python-service:5000
    volumes:
      - ./node-service:/app
      - /app/node_modules
    depends_on:
      - mongo
      - redis
      - python-service
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Service
  mongo:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Service
  redis:
    image: redis:alpine
    container_name: redis-cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Service (Load Balancer)
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - python-service
      - node-service
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - microservices-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - microservices-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false

networks:
  microservices-network:
    driver: bridge

volumes:
  mongo-data:
  redis-data:
  prometheus-data:
  grafana-data:
