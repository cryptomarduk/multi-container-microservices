const request = require('supertest');
const mongoose = require('mongoose');
const Redis = require('ioredis-mock');
const axios = require('axios');
const { MongoMemoryServer } = require('mongodb-memory-server');

// Mock dependencies
jest.mock('ioredis', () => require('ioredis-mock'));
jest.mock('axios');

// Import app after mocking dependencies
const app = require('../server');

describe('Node.js Microservice API', () => {
  let mongoServer;
  
  // Setup in-memory MongoDB for testing
  beforeAll(async () => {
    mongoServer = await MongoMemoryServer.create();
    const mongoUri = mongoServer.getUri();
    await mongoose.connect(mongoUri, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
  });
  
  // Clean up after tests
  afterAll(async () => {
    await mongoose.disconnect();
    await mongoServer.stop();
  });
  
  // Clear database between tests
  afterEach(async () => {
    const collections = mongoose.connection.collections;
    for (const key in collections) {
      await collections[key].deleteMany({});
    }
  });
  
  // Root endpoint
  test('GET / should return welcome message', async () => {
    const response = await request(app).get('/');
    expect(response.statusCode).toBe(200);
    expect(response.body.message).toBe('Welcome to Node.js Microservice API!');
  });
  
  // Health check
  test('GET /health should return health status', async () => {
    // Mock Python service health check
    axios.get.mockResolvedValueOnce({ data: { status: 'healthy' } });
    
    const response = await request(app).get('/health');
    expect(response.statusCode).toBe(200);
    expect(response.body.status).toBe('healthy');
    expect(response.body.services.mongo).toBe('connected');
    expect(response.body.services.redis).toBe('connected');
    expect(response.body.services.pythonService).toBe('connected');
  });
  
  // User API tests
  test('POST /api/users should create a new user', async () => {
    const userData = {
      name: 'Test User',
      email: 'test@example.com'
    };
    
    const response = await request(app)
      .post('/api/users')
      .send(userData);
    
    expect(response.statusCode).toBe(201);
    expect(response.body.message).toBe('User created successfully');
    expect(response.body.userId).toBeTruthy();
  });
  
  test('POST /api/users should return 400 for missing data', async () => {
    const response = await request(app)
      .post('/api/users')
      .send({});
    
    expect(response.statusCode).toBe(400);
    expect(response.body.error).toBe('Name and email are required');
  });
  
  test('GET /api/users should return users', async () => {
    // Create test user
    const userData = {
      name: 'Test User',
      email: 'test@example.com'
    };
    
    await request(app)
      .post('/api/users')
      .send(userData);
    
    const response = await request(app).get('/api/users');
    
    expect(response.statusCode).toBe(200);
    expect(Array.isArray(response.body)).toBeTruthy();
    expect(response.body.length).toBe(1);
    expect(response.body[0].name).toBe('Test User');
    expect(response.body[0].email).toBe('test@example.com');
  });
  
  // Python service integration
  test('POST /api/process-with-python should process data via Python service', async () => {
    // Mock Python service response
    const mockPythonResponse = {
      data: {
        sum: 15,
        avg: 3,
        min: 1,
        max: 5,
        processed_at: Date.now()
      }
    };
    
    axios.post.mockResolvedValueOnce(mockPythonResponse);
    
    const testData = {
      values: [1, 2, 3, 4, 5]
    };
    
    const response = await request(app)
      .post('/api/process-with-python')
      .send(testData);
    
    expect(response.statusCode).toBe(200);
    expect(response.body.sum).toBe(15);
    expect(response.body.avg).toBe(3);
    expect(response.body.processed_by).toBe('node');
    expect(response.body.even_values).toEqual([2, 4]);
    expect(response.body.odd_values).toEqual([1, 3, 5]);
  });
  
  test('POST /api/process-with-python should return 400 for invalid data', async () => {
    const response = await request(app)
      .post('/api/process-with-python')
      .send({});
    
    expect(response.statusCode).toBe(400);
    expect(response.body.error).toBe('Values array is required');
  });
  
  // Error handling
  test('GET /non-existent-route should return 404', async () => {
    const response = await request(app).get('/non-existent-route');
    expect(response.statusCode).toBe(404);
    expect(response.body.error).toBe('Route not found');
  });
});
